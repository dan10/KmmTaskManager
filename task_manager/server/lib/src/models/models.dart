// This file now exports models from the shared package
// to ensure consistency and usage of freezed objects.

export 'package:shared/models.dart';

// The previous content of this file included non-freezed duplicates of
// User, Project, and Task models, as well as TaskStatus and Priority enums.
// These are now superseded by the freezed versions in 'package:shared/models.dart'.
//
// Why this change?
// 1. Consistency: Ensures the server uses the same data structures as the client (if any)
//    and other parts of the system that might use the 'shared' package.
// 2. Maintainability: Avoids code duplication and the potential for inconsistencies
//    if changes are made to one set of models but not the other.
// 3. Correctness: Leverages 'freezed' for robust value equality, immutability,
//    and easy JSON serialization/deserialization via 'json_serializable'.
//
// Any server-side code that was previously importing and using the local User, Task,
// Project, TaskStatus, or Priority definitions from this file should now seamlessly
// receive the 'freezed' and 'json_serializable' versions from the 'shared' package.
//
// If server-specific Data Transfer Objects (DTOs) are needed in the future
// (e.g., for request/response bodies that differ significantly from the core domain models),
// they should be created as new files, ideally using 'freezed' as well.
// For example, a 'create_task_request_dto.dart'.
//
// The shared models (User, Project, Task, etc.) are expected to have:
// - @freezed annotation
// - fromJson / toJson methods generated by json_serializable
// - Necessary part files (e.g., *.freezed.dart, *.g.dart)
//
// Example of shared Task model structure (from package:shared/src/models/task.dart):
//
// import 'package:freezed_annotation/freezed_annotation.dart';
// part 'task.freezed.dart';
// part 'task.g.dart';
//
// enum TaskStatus { ... }
// enum Priority { ... }
//
// @freezed
// abstract class Task with _$Task {
//   const factory Task({ ... }) = _Task;
//   factory Task.fromJson(Map<String, dynamic> json) => _$TaskFromJson(json);
// }
//
// Similarly for User.dart and Project.dart in the shared package.
// The PaginatedResponse model in the shared package should also follow this pattern.
//
// This change centralizes model definitions in the 'shared' package.
// The server will now rely on these shared, freezed models for its core domain logic
// and for request/response serialization.
//
// The `models.dart` barrel file in `package:shared/` should export all relevant models,
// e.g. `export 'src/models/user.dart';`, `export 'src/models/task.dart';` etc.
// This allows the server to import them via `package:shared/models.dart`.
// I am assuming this barrel file (`task_manager/shared/lib/models.dart`) exists and is correctly set up.

// No specific DTOs are defined here for now. If complex request/response
// structures are needed that don't map directly to the shared models,
// they can be added as separate files in this directory or a 'dto' subdirectory,
// preferably using freezed.
