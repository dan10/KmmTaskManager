version: '3.8'

services:
  # Kotlin JVM Application (Fast Build)
  app-jvm:
    image: ktor-jvm-server:latest
    container_name: ktor-app-jvm
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=jdbc:postgresql://db:5432/taskitdb
      - DATABASE_USER=taskituser
      - DATABASE_PASSWORD=password
      - JWT_SECRET=your_jwt_secret_here
      - JWT_ISSUER=taskit
      - JWT_AUDIENCE=task-manager-users
      - JWT_REALM=task-manager-api
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET=taskit-files
      - S3_REGION=us-east-1
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - stress-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kotlin Native Application (Fast Build)
  app-native:
    image: ktor-native-server:latest
    container_name: ktor-app-native
    ports:
      - "8085:8081"
    environment:
      - DATABASE_URL=jdbc:postgresql://db:5432/taskitdb
      - DATABASE_USER=taskituser
      - DATABASE_PASSWORD=password
      - JWT_SECRET=your_jwt_secret_here
      - JWT_ISSUER=taskit
      - JWT_AUDIENCE=task-manager-users
      - JWT_REALM=task-manager-api
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET=taskit-files
      - S3_REGION=us-east-1
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - stress-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G  # Native images typically use less memory
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s  # Native images start faster

  # Dart Application (Fast Build)
  app-dart:
    image: dart-server:latest
    container_name: dart-app-stress
    ports:
      - "8082:8080"
    environment:
      - DATABASE_URL=postgres://taskituser:password@db:5432/taskitdb
      - JWT_SECRET=your_jwt_secret_here
      - LOG_LEVEL=INFO
    depends_on:
      db:
        condition: service_healthy
    networks:
      - stress-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Shared PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: postgres-stress-db
    environment:
      POSTGRES_DB: taskitdb
      POSTGRES_USER: taskituser
      POSTGRES_PASSWORD: password
      POSTGRES_SHARED_BUFFERS: "1GB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "3GB"
      POSTGRES_WORK_MEM: "32MB"
      POSTGRES_MAINTENANCE_WORK_MEM: "256MB"
      POSTGRES_MAX_CONNECTIONS: "200"
      POSTGRES_RANDOM_PAGE_COST: "1.1"
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: "200"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U taskituser -d taskitdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - stress_db_data:/var/lib/postgresql/data
    networks:
      - stress-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: minio-stress
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - stress_minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - stress-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Enhanced Prometheus for stress testing
  prometheus-stress:
    image: prom/prometheus:latest
    container_name: prometheus-stress
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-stress.yml:/etc/prometheus/prometheus.yml
      - stress_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=1h'  # Short retention for stress testing
      - '--storage.tsdb.retention.size=10GB'
    networks:
      - stress-network
    depends_on:
      - app-jvm
      - app-native
      - app-dart
      - cadvisor-stress

  # Enhanced Grafana for stress testing
  grafana-stress:
    image: grafana/grafana:latest
    container_name: grafana-stress
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - stress_grafana_data:/var/lib/grafana
      - ./grafana/stress-dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/stress-datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus-stress
    networks:
      - stress-network

  # cAdvisor for container monitoring
  cadvisor-stress:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-stress
    privileged: true
    ports:
      - "8084:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    devices:
      - /dev/kmsg:/dev/kmsg
    command:
      - '--store_container_labels=true'
      - '--docker_only=true'
      - '--housekeeping_interval=10s'
      - '--max_housekeeping_interval=15s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
    networks:
      - stress-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 512M

  # Node Exporter for host metrics
  node-exporter-stress:
    image: prom/node-exporter:latest
    container_name: node-exporter-stress
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    networks:
      - stress-network

  # Load testing service
  stress-tester:
    image: alpine/curl:latest
    container_name: stress-tester
    volumes:
      - ./stress-tests:/tests
    networks:
      - stress-network
    depends_on:
      - app-jvm
      - app-native
      - app-dart
    command: [ "sleep", "infinity" ]

networks:
  stress-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  stress_db_data:
  stress_grafana_data:
  stress_prometheus_data:
  stress_minio_data: 